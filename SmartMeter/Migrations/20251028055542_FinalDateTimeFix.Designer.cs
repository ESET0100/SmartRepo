// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartMeter.Data;

#nullable disable

namespace SmartMeter.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251028055542_FinalDateTimeFix")]
    partial class FinalDateTimeFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartMeter.Models.Address", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<long>("ConsumerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("AddressId");

                    b.HasIndex("ConsumerId")
                        .HasDatabaseName("IDX_Address_ConsumerId");

                    b.HasIndex("Pincode")
                        .HasDatabaseName("IDX_Address_Pincode");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("SmartMeter.Models.Arrears", b =>
                {
                    b.Property<long>("ArrearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ArrearId"));

                    b.Property<decimal>("ArrearAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ArrearType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<long>("BillId")
                        .HasColumnType("bigint");

                    b.Property<long>("ConsumerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("PaidStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Pending");

                    b.HasKey("ArrearId");

                    b.HasIndex("BillId")
                        .HasDatabaseName("IDX_Arrears_BillId");

                    b.HasIndex("ConsumerId")
                        .HasDatabaseName("IDX_Arrears_ConsumerId");

                    b.HasIndex("PaidStatus")
                        .HasDatabaseName("IDX_Arrears_PaidStatus");

                    b.ToTable("Arrears", t =>
                        {
                            t.HasCheckConstraint("CHK_Arrears_Amount_Positive", "\"ArrearAmount\" >= 0");

                            t.HasCheckConstraint("CHK_Arrears_ArrearType", "\"ArrearType\" IN ('interest', 'penalty', 'overdue')");

                            t.HasCheckConstraint("CHK_Arrears_PaidStatus", "\"PaidStatus\" IN ('Pending', 'Paid', 'Partial')");
                        });
                });

            modelBuilder.Entity("SmartMeter.Models.Billing", b =>
                {
                    b.Property<long>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BillId"));

                    b.Property<decimal>("BaseAmount")
                        .HasColumnType("numeric(18,4)");

                    b.Property<DateOnly>("BillingPeriodEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly>("BillingPeriodStart")
                        .HasColumnType("date");

                    b.Property<long>("ConsumerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DisconnectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("GeneratedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("MeterId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Unpaid");

                    b.Property<decimal>("TaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,4)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("numeric(18,4)")
                        .HasComputedColumnSql("\"BaseAmount\" + \"TaxAmount\"", true);

                    b.Property<decimal>("TotalUnitsConsumed")
                        .HasColumnType("numeric(18,6)");

                    b.HasKey("BillId");

                    b.HasIndex("ConsumerId")
                        .HasDatabaseName("IDX_Billing_ConsumerId");

                    b.HasIndex("MeterId")
                        .HasDatabaseName("IDX_Billing_MeterId");

                    b.HasIndex("PaymentStatus")
                        .HasDatabaseName("IDX_Billing_PaymentStatus");

                    b.HasIndex("BillingPeriodStart", "BillingPeriodEnd")
                        .HasDatabaseName("IDX_Billing_Period");

                    b.ToTable("Billing", t =>
                        {
                            t.HasCheckConstraint("CHK_BaseAmount_Positive", "\"BaseAmount\" >= 0");

                            t.HasCheckConstraint("CHK_Billing_PaymentStatus", "\"PaymentStatus\" IN ('Unpaid', 'Paid', 'Overdue', 'Cancelled')");

                            t.HasCheckConstraint("CHK_Billing_Period", "\"BillingPeriodEnd\" > \"BillingPeriodStart\"");

                            t.HasCheckConstraint("CHK_DueDate_After_End", "\"DueDate\" >= \"BillingPeriodEnd\"");

                            t.HasCheckConstraint("CHK_TaxAmount_Positive", "\"TaxAmount\" >= 0");
                        });
                });

            modelBuilder.Entity("SmartMeter.Models.Consumer", b =>
                {
                    b.Property<long>("ConsumerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ConsumerId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("system");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("OrgUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Active");

                    b.Property<int>("TariffId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(100)");

                    b.HasKey("ConsumerId");

                    b.HasIndex("OrgUnitId");

                    b.HasIndex("TariffId");

                    b.ToTable("Consumer", t =>
                        {
                            t.HasCheckConstraint("CHK_Consumer_Status", "\"Status\" IN ('Active','Inactive')");

                            t.HasCheckConstraint("CHK_Consumer_UpdatedAfterCreated", "\"UpdatedAt\" IS NULL OR \"UpdatedAt\" >= \"CreatedAt\"");
                        });
                });

            modelBuilder.Entity("SmartMeter.Models.Meter", b =>
                {
                    b.Property<string>("MeterSerialNo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<long>("ConsumerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Firmware")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ICCID")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IMSI")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("InstallTsUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Active");

                    b.HasKey("MeterSerialNo");

                    b.HasIndex("ConsumerId");

                    b.ToTable("Meter", t =>
                        {
                            t.HasCheckConstraint("CHK_Meter_Status", "\"Status\" IN ('Active','Inactive','Decommissioned')");
                        });
                });

            modelBuilder.Entity("SmartMeter.Models.MeterReading", b =>
                {
                    b.Property<long>("ReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ReadingId"));

                    b.Property<decimal?>("Current")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal>("EnergyConsumed")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("MeterSerialNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("ReadingDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("Voltage")
                        .HasColumnType("decimal(8,3)");

                    b.HasKey("ReadingId");

                    b.HasIndex("MeterSerialNo");

                    b.ToTable("MeterReading", t =>
                        {
                            t.HasCheckConstraint("CHK_MeterReading_EnergyConsumed_Positive", "\"EnergyConsumed\" >= 0");
                        });
                });

            modelBuilder.Entity("SmartMeter.Models.OrgUnit", b =>
                {
                    b.Property<int>("OrgUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrgUnitId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("OrgUnitId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IDX_OrgUnit_Name");

                    b.HasIndex("ParentId");

                    b.HasIndex("Type")
                        .HasDatabaseName("IDX_OrgUnit_Type");

                    b.ToTable("OrgUnit", t =>
                        {
                            t.HasCheckConstraint("CHK_OrgUnit_Type", "\"Type\" IN ('Zone','Substation','Feeder','DTR')");
                        });
                });

            modelBuilder.Entity("SmartMeter.Models.Tariff", b =>
                {
                    b.Property<int>("TariffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TariffId"));

                    b.Property<decimal>("BaseRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateOnly>("EffectiveFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EffectiveTo")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("TariffId");

                    b.ToTable("Tariff", t =>
                        {
                            t.HasCheckConstraint("CHK_Tariff_BaseRate_Positive", "\"BaseRate\" > 0");

                            t.HasCheckConstraint("CHK_Tariff_EffectiveDates", "\"EffectiveTo\" IS NULL OR \"EffectiveTo\" > \"EffectiveFrom\"");
                        });
                });

            modelBuilder.Entity("SmartMeter.Models.TariffSlab", b =>
                {
                    b.Property<int>("TariffSlabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TariffSlabId"));

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("FromKwh")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RatePerKwh")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("TariffId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ToKwh")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("TariffSlabId");

                    b.HasIndex("TariffId");

                    b.ToTable("TariffSlab", t =>
                        {
                            t.HasCheckConstraint("CHK_TariffSlab_Range", "\"FromKwh\" >= 0 AND \"ToKwh\" > \"FromKwh\"");

                            t.HasCheckConstraint("CHK_TariffSlab_Rate_Positive", "\"RatePerKwh\" > 0");
                        });
                });

            modelBuilder.Entity("SmartMeter.Models.TodRule", b =>
                {
                    b.Property<int>("TodRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TodRuleId"));

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("RatePerKwh")
                        .HasColumnType("decimal(18,6)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(0)");

                    b.Property<int>("TariffId")
                        .HasColumnType("integer");

                    b.HasKey("TodRuleId");

                    b.HasIndex("TariffId");

                    b.ToTable("TodRule", t =>
                        {
                            t.HasCheckConstraint("CHK_TodRule_Rate_NonNegative", "\"RatePerKwh\" >= 0");

                            t.HasCheckConstraint("CHK_TodRule_TimeRange", "\"EndTime\" > \"StartTime\"");
                        });
                });

            modelBuilder.Entity("SmartMeter.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("SmartMeter.Models.Address", b =>
                {
                    b.HasOne("SmartMeter.Models.Consumer", "Consumer")
                        .WithMany("Addresses")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("SmartMeter.Models.Arrears", b =>
                {
                    b.HasOne("SmartMeter.Models.Billing", "Billing")
                        .WithMany("Arrears")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMeter.Models.Consumer", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Billing");

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("SmartMeter.Models.Billing", b =>
                {
                    b.HasOne("SmartMeter.Models.Consumer", "Consumer")
                        .WithMany("Billings")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMeter.Models.Meter", "Meter")
                        .WithMany("Billings")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("SmartMeter.Models.Consumer", b =>
                {
                    b.HasOne("SmartMeter.Models.OrgUnit", "OrgUnit")
                        .WithMany("Consumers")
                        .HasForeignKey("OrgUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMeter.Models.Tariff", "Tariff")
                        .WithMany("Consumers")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrgUnit");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("SmartMeter.Models.Meter", b =>
                {
                    b.HasOne("SmartMeter.Models.Consumer", "Consumer")
                        .WithMany("Meters")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("SmartMeter.Models.MeterReading", b =>
                {
                    b.HasOne("SmartMeter.Models.Meter", "Meter")
                        .WithMany("MeterReadings")
                        .HasForeignKey("MeterSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("SmartMeter.Models.OrgUnit", b =>
                {
                    b.HasOne("SmartMeter.Models.OrgUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SmartMeter.Models.TariffSlab", b =>
                {
                    b.HasOne("SmartMeter.Models.Tariff", "Tariff")
                        .WithMany("TariffSlabs")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("SmartMeter.Models.TodRule", b =>
                {
                    b.HasOne("SmartMeter.Models.Tariff", "Tariff")
                        .WithMany("TodRules")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("SmartMeter.Models.Billing", b =>
                {
                    b.Navigation("Arrears");
                });

            modelBuilder.Entity("SmartMeter.Models.Consumer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Billings");

                    b.Navigation("Meters");
                });

            modelBuilder.Entity("SmartMeter.Models.Meter", b =>
                {
                    b.Navigation("Billings");

                    b.Navigation("MeterReadings");
                });

            modelBuilder.Entity("SmartMeter.Models.OrgUnit", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Consumers");
                });

            modelBuilder.Entity("SmartMeter.Models.Tariff", b =>
                {
                    b.Navigation("Consumers");

                    b.Navigation("TariffSlabs");

                    b.Navigation("TodRules");
                });
#pragma warning restore 612, 618
        }
    }
}
